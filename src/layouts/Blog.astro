---
import MainLayout from '../layouts/MainLayout.astro';

---

<MainLayout>
    <slot></slot>
</MainLayout>

<style is:inline>
    * {
        font-family: "IBM Plex Mono", monospace;
    }
    p{
        margin: 10px 0;
        font-size: 1rem;
    }
    h1 {
        margin: 10px 5px 0;
        font-size: 1.4rem;
        overflow:hidden;
        width:90%;
    }

    h2 {
        margin: 10px 5px 0;
        font-size: 1.2rem;
    }


    @media (max-width:600px) {
        h1{
          height:min-content;
          min-height: 4rem;
        }
    }

    @media (max-width: 768px) {
        h1{
          height:65px;

        }
    }

</style>

<script>
   let audioContext: AudioContext | undefined;
   let audioBuffer: AudioBuffer | undefined;
   let sourceNode: AudioBufferSourceNode | undefined;

   document.addEventListener('DOMContentLoaded', () => {
    audioContext = new AudioContext();

    let isDecrypting = false;

    async function loadAudio() {
        const audioUrl = 'https://audio.jukehost.co.uk/EqW6fci0a87uV7WFDGz3mTC3u0CDBONk';
        const response = await fetch(audioUrl);
        const arrayBuffer = await response.arrayBuffer();
        if (audioContext) {
            audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        }
    }

    function playAudio() {
        if (audioContext && audioBuffer) {
            sourceNode = audioContext.createBufferSource();
            sourceNode.buffer = audioBuffer;
            sourceNode.connect(audioContext.destination);
            sourceNode.loop = true;
            sourceNode.start();
        }
    }

    function stopAudio() {
        if (sourceNode) {
            sourceNode.stop();
        }
    }

    function getRandomChar() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*';
        return chars.charAt(Math.floor(Math.random() * chars.length));
    }

    async function decryptText(element, originalText) {
        if (isDecrypting) return;
        isDecrypting = true;

        await loadAudio();
        let currentText = Array(originalText.length).fill('').map(getRandomChar).join('');
        element.textContent = currentText;

        // Wait for user interaction to start the audio
        document.addEventListener('click', function startAudio() {
            playAudio();
            document.removeEventListener('click', startAudio);
        }, { once: true });

        let index = 0;
        const interval = setInterval(() => {
            if (index >= originalText.length) {
                clearInterval(interval);
                stopAudio();
                isDecrypting = false;
                return;
            }

            currentText = currentText.split('').map((_, i) => {
                if (i < index) return originalText[i];
                if (i === index) return originalText[i];
                return getRandomChar();
            }).join('');

            element.textContent = currentText;
            index++;
        }, 15);
    }

    function handlePageLoad() {
        const h1 = document.querySelector('h1');
        if (h1) {
            const originalText = h1.textContent || '';
            decryptText(h1, originalText);
        }
    }

    window.addEventListener('DOMContentLoaded', handlePageLoad);

    function cleanUp() {
        stopAudio();
        isDecrypting = false;
    }

    window.addEventListener('pagehide', cleanUp);
});

</script>
