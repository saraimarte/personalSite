---
import MainLayout from '../layouts/MainLayout.astro';

---

<MainLayout>
    <slot></slot>
</MainLayout>

<style is:inline>
    * {
        font-family: "IBM Plex Mono", monospace;
    }
    p{
        margin: 10px 0;
        font-size: 1rem;
    }
    h1 {
        margin: 10px 5px 0;
        font-size: 1.4rem;
        overflow:hidden;
        width:90%;
    }

    h2 {
        margin: 10px 5px 0;
        font-size: 1.2rem;
    }


    @media (max-width:600px) {
        h1{
          height:min-content;
          min-height: 4rem;
        }
    }

    @media (max-width: 768px) {
        h1{
          height:65px;

        }
    }

</style>

<script>
  let audioContext: AudioContext | undefined;
  let audioBuffer: AudioBuffer | undefined;
  let sourceNode: AudioBufferSourceNode | undefined;

   // Load and decode audio
   async function loadAudio() {
     const audioUrl = 'https://audio.jukehost.co.uk/EqW6fci0a87uV7WFDGz3mTC3u0CDBONk';
     const response = await fetch(audioUrl);
     const arrayBuffer = await response.arrayBuffer();
     if (!audioContext) {
       audioContext = new (window.AudioContext || window.webkitAudioContext)();
     }
     audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
   }

   // Play audio
   function playAudio() {
     if (audioContext && audioBuffer) {
       sourceNode = audioContext.createBufferSource();
       sourceNode.buffer = audioBuffer;
       sourceNode.connect(audioContext.destination);
       sourceNode.loop = true;
       sourceNode.start();
     }
   }

   // Stop audio
   function stopAudio() {
     if (sourceNode) {
       sourceNode.stop();
       sourceNode.disconnect();
     }
   }

   function getRandomChar() {
     const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*';
     return chars.charAt(Math.floor(Math.random() * chars.length));
   }

   async function decryptText(element, originalText) {
     if (audioContext && audioBuffer) {
       playAudio();
     }

     let currentText = Array(originalText.length).fill('').map(getRandomChar).join('');
     element.textContent = currentText;

     let index = 0;
     const interval = setInterval(() => {
       if (index >= originalText.length) {
         clearInterval(interval);
         stopAudio();
         return;
       }

       currentText = currentText.split('').map((_, i) => {
         if (i < index) return originalText[i];
         if (i === index) return originalText[i];
         return getRandomChar();
       }).join('');

       element.textContent = currentText;
       index++;
     }, 15); // Adjust speed here (lower number = faster)
   }

   function handlePageLoad() {
     const h1 = document.querySelector('h1');
     if (h1) {
       const originalText = h1.textContent || '';
       decryptText(h1, originalText);
     }
   }

   window.addEventListener('DOMContentLoaded', () => {
     loadAudio().then(handlePageLoad);
   });

   window.addEventListener('pagehide', () => {
     stopAudio();
   });
</script>
