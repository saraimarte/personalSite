---
import MainLayout from '@layouts/MainLayout.astro';
import Card from '@components/Card.astro';
import Filter from '@components/Filter.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
    const phases = ['thought', 'rabbit hole', 'article'];
    return phases.map(phase => ({ params: { phase } }));
}

const { phase = 'article' } = Astro.params;

const allBlogArticles: CollectionEntry<'blog'>[] = (await getCollection('blog'))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const allTags = Array.from(
  new Set(allBlogArticles.flatMap(article => article.data.tags))
).sort();

const phaseArticles = allBlogArticles.filter(post => post.data.phase.toLowerCase() === phase.toLowerCase());

const url = new URL(Astro.request.url);
const selectedTag = url.searchParams.get('tag');

const filteredArticles = selectedTag
  ? phaseArticles.filter(article => article.data.tags.includes(selectedTag))
  : phaseArticles;
---

<MainLayout pageTitle={`${phase.charAt(0).toUpperCase() + phase.slice(1)} Posts`}>
    <div class="container">
        <Filter 
            allTags={allTags}
            selectedTag={selectedTag}
            currentPhase={phase}
        />

        <div class="filteredPosts">
            {filteredArticles.length > 0 ? (
                filteredArticles.map(article => (
                    <Card article={article} />
                ))
            ) : (
                <p>No articles found for the phase "{phase}" {selectedTag ? `and tag "${selectedTag}"` : ''}.</p>
            )}
        </div>
    </div>
</MainLayout>

<style>
.filteredPosts {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 1em;
}

.container {
  height: 100%;
  width: 100%;
  padding: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
</style>