---
import MainLayout from '@layouts/MainLayout.astro';
import Card from '@components/Card.astro';
import Filter from '@components/Filter.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const allBlogArticles: CollectionEntry<'blog'>[] = await getCollection('blog');
  const tags = new Set(allBlogArticles.flatMap(article => article.data.tags || []));
  return Array.from(tags).map(tag => ({
    params: { tag }
  }));
}

const { tag } = Astro.params;
if (!tag) {
  throw new Error('Tag is required');
}

const allBlogArticles: CollectionEntry<'blog'>[] = (await getCollection('blog'))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const allTags = Array.from(new Set(allBlogArticles.flatMap(article => article.data.tags || []))).sort();
const allPhases = Array.from(new Set(allBlogArticles.flatMap(article => article.data.phase || []))).sort();

const tagArticles = allBlogArticles
  .filter(post => post.data.tags.includes(tag))
  .filter(post => !Astro.request.url.searchParams.get('phase') || post.data.phase === Astro.request.url.searchParams.get('phase'));

---
<MainLayout pageTitle={`Posts tagged with "${tag}"`}>
  <div class="container">
    <Filter 
      allTags={allTags}
      selectedTag={tag}
      allPhases={allPhases}
      selectedPhase={Astro.request.url.searchParams.get('phase') || ''}
    />
    <div class="filteredPosts">
      {tagArticles.length > 0 ? (
        tagArticles.map(article => (
          <Card article={article} />
        ))
      ) : (
        <p>No articles found for the tag "{tag}".</p>
      )}
    </div>
  </div>
</MainLayout>

<style>
.filteredPosts {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 1em;
}
.container {
  height: 100%;
  width: 100%;
  padding: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}
</style>
