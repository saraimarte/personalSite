---
import MainLayout from '@layouts/MainLayout.astro';
import img1 from '@assets/cube.svg';
import img2 from '@assets/webdev.svg';
import img3 from '@assets/paintbrush.svg';
import img4 from '@assets/photo.svg';
import img5 from '@assets/video.svg';
import img6 from '@assets/school.svg';

import tools from '../data/tools.json';
---
<MainLayout pageTitle = "Home">

	<div class = "container">
		<div class = "noise">
		</div>

		<div class="content">

			<div x-data="{ open: false }" class="dropdown">
			  <button @click="open = ! open" class="button">
				<p>Filter Tools</p>
			  </button>
			  <div x-cloak x-show="open" x-transition @click.away="open = false" class="menu">
				<div class="menu-item" id="3d">
					<img src={img1.src} alt="3D Tools"/>
					<p>3D</p>
				  </div>
				  <div class="menu-item" id="Webdev">
					<img src={img2.src} alt="Web Development Tools"/>
					<p>Webdev</p>
				  </div>
				  <div class="menu-item" id="Design">
					<img src={img3.src} alt="Design Tools"/>
					<p>Design</p>
				  </div>
				  <div class="menu-item" id="Image">
					<img src={img4.src} alt="Image Tools"/>
					<p>Image</p>
				  </div>
				  <div class="menu-item" id="Video">
					<img src={img5.src} alt="Video Tools"/>
					<p>Video</p>
				  </div>
				  <div class="menu-item" id="Study">
					<img src={img6.src} alt="Study Tools"/>
					<p>Study</p>
				  </div>
				  
			  </div>
			</div>

			<div class = "tools">
			
				<h1 id = "toolCategory">3D Tools</h1>
				
				<div id = "all" class = "tag clickedOn">all</div>


				<div id = "tags" class="tags">
					

					{tools
					  .filter((tool) => tool.category === "3d")
					  .map((tool) => (
						<div id = {tool.tag} class = "tag">
						  {tool.tag}
						</div>
					  ))}
				  </div>


				  <div id = "toolDisplay" >

					{tools

						.filter((tool) => tool.category === "3d")
						.map((tool) => (

						<a href = {tool.link} class = {`toolCard ${tool.tag}`}>
							
							<div class = "toolIcon">
								<img src = {tool.icon}/>
							</div>
		
							<p class = "toolName">{tool.name}</p>
		
							<p class = "toolDescription">{tool.description}</p>
		
		
						</a>
						
					))}
				
					</div>
				</div>
				
			
	</div>
</MainLayout>

<style>
	@import url('https://fonts.googleapis.com/css2?family=Edu+AU+VIC+WA+NT+Hand:wght@400..700&family=Mate:ital@0;1&family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap');
</style>

<style>


img{
	height:2em;
	width:2em;
}

* {
	font-family: "Mate", serif;
	font-weight: 400;
	font-style: normal;

}
.content{
	height:100%;
	width:100%;
	display: flex;
	gap:1em;
	justify-content: center;
	align-items:center;
	flex-wrap:wrap;
}
.tags{
	height:min-content;
	width:100%;
	display: flex;
	align-items: center;
	flex-wrap:wrap;
	gap:1em;
}
.tag{
	height:min-content;
	width:max-content;
	padding: 0.5em 1em;
	text-align: center;
	border-radius:20px;
	border:1px solid  rgb(233, 233, 233);
	user-select: none;

}
.tools{
	background-color: #F0F8FF;
    height:45em;
	width:45em;
	overflow-y:scroll;
	padding:2em;
	z-index:2;
	border-radius: 20px;
	display: flex;
	flex-direction: column;
	gap:1em;
	box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px;
}

#toolDisplay{
	display: flex;
	flex-direction: column;
	gap:1em;
	height:100%;
	width:100%;
}

.toolCard{
	width:100%;
	height:10%;
	border-radius:20px;
	display:flex;
	justify-content: center;
	align-items:center;
	box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px 0px;
	gap:1em;
	text-decoration: none;
	color:black;
}
.container {
  height: 100%;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-image: linear-gradient(35deg,
      hsl(320deg 60% 92%) 0%,
      hsl(330deg 100% 93%) 24%,
      hsl(339deg 100% 92%) 36%,
      hsl(354deg 100% 92%) 43%,
      hsl(13deg 100% 89%) 48%,
      hsl(26deg 100% 85%) 52%,
      hsl(36deg 100% 81%) 56%,
      hsl(44deg 100% 77%) 61%,
      hsl(50deg 100% 74%) 67%,
      hsl(55deg 100% 72%) 90%);
}

.noise {
	position: absolute;
	height: 100%;
	width: 100%;
	background-image: url("../../public/toolImages/noise2.svg");
	opacity: 0.1;
}


/* Dropdown styles */
.dropdown {
  display: inline-flex; /* Equivalent to inline-flex */
  position: relative; /* Equivalent to relative */
  height:700px;
}

/* Button styles */
.button {
  border: 1px solid #F0F8FF; /* Equivalent to border border-gray-200 */
  border-radius: 0.5rem; /* Equivalent to rounded-lg */
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); /* Equivalent to shadow-sm */
  position: relative;
  border-radius:50%;
  width:6em;
  height: 6em;
  text-align: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items:center;
  user-select:none;
  background-color: #F0F8FF; /* Equivalent to bg-white */
  box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px;
}

/* Icon styles */
.icon {
  display: flex;
  align-items: center;
  cursor: pointer;
  position: absolute;
  right: 0;
  padding-right: 0.75rem; /* Equivalent to pr-3 */
}

.icon-svg {
  width: 1rem; /* Equivalent to w-4 */
  height: 1rem; /* Equivalent to h-4 */
}
/* Menu styles */
.menu {
  width: 100%; /* Equivalent to w-full */
  position: absolute;
  top: 5rem; /* Equivalent to top-12 */
  left: 0;
  padding: 0.5rem; /* Equivalent to p-2 */
  border-radius: 0.5rem; /* Equivalent to rounded-lg */
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); /* Equivalent to shadow */
  display: flex;
  flex-direction: column;
  gap:1em;
  justify-content: center;
  align-items: center;

}

/* Menu item styles */
.menu-item {
  width:5rem;
  height:5rem;
  border-radius:50%;
  cursor: pointer;
  text-align: center;
  background-color: #F0F8FF; /* Equivalent to bg-white */
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-size:0.9em;
  user-select:none;
  box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px;

}

.menu-item:hover {
	background-image: linear-gradient(35deg,
      hsl(320deg 60% 92%) 0%,
      hsl(330deg 100% 93%) 24%,
      hsl(339deg 100% 92%) 36%,
      hsl(354deg 100% 92%) 43%,
      hsl(13deg 100% 89%) 48%,
      hsl(26deg 100% 85%) 52%,
      hsl(36deg 100% 81%) 56%,
      hsl(44deg 100% 77%) 61%,
      hsl(50deg 100% 74%) 67%,
      hsl(55deg 100% 72%) 90%);
	}

.clickedOn{
	background-image: linear-gradient(35deg,
      hsl(320deg 60% 92%) 0%,
      hsl(330deg 100% 93%) 24%,
      hsl(339deg 100% 92%) 36%,
      hsl(354deg 100% 92%) 43%,
      hsl(13deg 100% 89%) 48%,
      hsl(26deg 100% 85%) 52%,
      hsl(36deg 100% 81%) 56%,
      hsl(44deg 100% 77%) 61%,
      hsl(50deg 100% 74%) 67%,
      hsl(55deg 100% 72%) 90%);
}

</style>

<script src="../scripts/toolcard-component.ts"></script>
<script src="../scripts/tagcomp-component.ts"></script>


<script define:vars= {{tools}}>


document.addEventListener('DOMContentLoaded', () => {
  // Attach event listeners to category menu items
  document.querySelector('.dropdown').addEventListener('click', (event) => {
    if (event.target.closest('.menu-item')) {
      onCategoryClick(event);
    }
  });

  // Use event delegation for tag clicks
  document.querySelector('.tags').addEventListener('click', (event) => {
    const tagComponent = event.target.closest('tagcomp-component');
    if (tagComponent) {
      onTagClick(event, tagComponent);
    }
  });

  function onCategoryClick(event) {

	const heading = document.getElementById("toolCategory");
    event.preventDefault();

    const target = event.target.closest('.menu-item');
    const categoryName = target.id;

	heading.textContent = `${categoryName} Tools` ;


    document.querySelectorAll('.menu-item').forEach(category => {
      category.classList.remove('clickedOn');
	  category.classList.remove('selectedCategory');

    });

    target.classList.add('clickedOn');
    target.classList.add('selectedCategory');

    displayTags(categoryName);
    const filteredTools = filterToolsByCategory(categoryName);
    displayTools(filteredTools);
  }

  function onTagClick(event, tagComponent) {

	const allTag = document.getElementById("all");

	all.classList.remove("clickedOn");
	
	console.warn("Tag has been clicked")
	console.log(tagComponent);
    event.preventDefault();

    const tagElement = tagComponent.getTagElement();
    if (!tagElement) return;
	console.log(tagElement);

    const tagName = tagElement.id;

    document.querySelectorAll('tagcomp-component').forEach(tag => {
      const tagEl = tag.getTagElement();
      if (tagEl) tagEl.classList.remove('clickedOn');
    });
    tagElement.classList.add('clickedOn'); //but this clickedOn class has to be INSIDE the component styles not here.

    const selectedCategory = document.querySelector('.menu-item.clickedOn');
    if (selectedCategory && tagName) {
      const selectedCategoryName = selectedCategory.id;
      const filteredTools = filterToolsByCategoryAndTag(selectedCategoryName, tagName);
      displayTools(filteredTools);
    } else {
      console.warn('Category has not been selected');
    }
  }

  function displayTags(categoryName) {
    console.warn(`displayTags is running. The Category name is ${categoryName}`);
    
    const tagsContainer = document.querySelector('.tags');
    tagsContainer.innerHTML = '';

    const filteredTools = tools.filter(tool => tool.category === categoryName);
    filteredTools.forEach(tool => {
      const myElement = document.createElement('tagcomp-component');
      myElement.setAttribute('tag', tool.tag);
      tagsContainer.appendChild(myElement);
    });
  }

  function displayTools(filteredTools) {
    const toolDisplay = document.getElementById('toolDisplay');
    toolDisplay.innerHTML = '';

    filteredTools.forEach(tool => {
      const myElement = document.createElement('toolcard-component');
      myElement.setAttribute('icon', tool.icon);
      myElement.setAttribute('name', tool.name);
      myElement.setAttribute('description', tool.description);
      myElement.setAttribute('category', tool.category);
      myElement.setAttribute('tag', tool.tag);
      myElement.setAttribute('link', tool.link);
      toolDisplay.appendChild(myElement);
    });
  }

  function filterToolsByCategoryAndTag(category, tag) {
    return tools.filter(tool => tool.category === category && tool.tag === tag);
  }

  function filterToolsByCategory(category) {
    return tools.filter(tool => tool.category === category);
  }
  	

const allTag = document.getElementById("all");

allTag.addEventListener("click", onAllTagClick);

function onAllTagClick () {
	allTag.classList.add("clickedOn");

	const selectedCategory = document.querySelector('.selectedCategory');
	console.log(selectedCategory);
	const categoryName = selectedCategory.id;
    const filteredTools = filterToolsByCategory(categoryName);

	displayTools(filteredTools);

}



});


</script>