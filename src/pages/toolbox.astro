---
import MainLayout from '@layouts/MainLayout.astro';
import img1 from '@assets/cube.svg';
import img2 from '@assets/webdev.svg';
import img3 from '@assets/paintbrush.svg';
import img4 from '@assets/photo.svg';
import img5 from '@assets/video.svg';
import img6 from '@assets/school.svg';

import tools from '../data/tools.json';
---

<MainLayout pageTitle = "Home">

	<div class = "container">
		<div class = "noise">
		</div>

		<div class="content">

			<div x-data="{ open: false }" class="dropdown">
			  <button @click="open = ! open" class="button">
				<p>Filter Tools</p>
			  </button>
			  <div x-cloak x-show="open" x-transition @click.away="open = false" class="menu">
				<div class="menu-item" id="3d">
					<img src={img1.src} alt="3D Tools"/>
					<p>3D</p>
				  </div>
				  <div class="menu-item" id="Webdev">
					<img src={img2.src} alt="Web Development Tools"/>
					<p>Webdev</p>
				  </div>
				  <div class="menu-item" id="Design">
					<img src={img3.src} alt="Design Tools"/>
					<p>Design</p>
				  </div>
				  <div class="menu-item" id="Image">
					<img src={img4.src} alt="Image Tools"/>
					<p>Image</p>
				  </div>
				  <div class="menu-item" id="Video">
					<img src={img5.src} alt="Video Tools"/>
					<p>Video</p>
				  </div>
				  <div class="menu-item" id="Study">
					<img src={img6.src} alt="Study Tools"/>
					<p>Study</p>
				  </div>
				  
			  </div>
			</div>

			<div class = "tools">
			
				<h1 id = "toolCategory">3D Tools</h1>
			

				<div id = "tags" class="tags">
					

					{tools
					  .filter((tool) => tool.category === "3d")
					  .map((tool) => (
						<div id = {tool.tag} class = "tag">
						  {tool.tag}
						</div>
					  ))}
				  </div>

				  <div id = "toolDisplay" >

					{tools

						.filter((tool) => tool.category === "3d")
						.map((tool) => (

						<a href = {tool.link} class = {`toolCard ${tool.tag}`}>
							
							<div class = "toolIcon">
								<img src = {tool.icon}/>
							</div>
		
							<p class = "toolName">{tool.name}</p>
		
							<p class = "toolDescription">{tool.description}</p>
	
						</a>
						
					))}
				
					</div>
				</div>
				
	</div>
</MainLayout>

<script src="../scripts/toolcard-component.ts"></script>
<script src="../scripts/tagcomp-component.ts"></script>
<script src="../scripts/all-component.ts"></script>

<style>
@import url('https://fonts.googleapis.com/css2?family=Edu+AU+VIC+WA+NT+Hand:wght@400..700&family=Mate:ital@0;1&family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap');

* {
    font-family: "Mate", serif;
    font-weight: 400;
    font-style: normal;
    box-sizing: border-box;
}

img {
    height: 2em;
    width: 2em;
}

.content {
    height: 100%;
    width: 100%;
    display: flex;
    gap: 1em;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
}

.tags {
    height: min-content;
    width: 100%;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 1em;
}

.tag {
    height: min-content;
    width: max-content;
    padding: 0.5em 1em;
    text-align: center;
    border-radius: 20px;
    border: 1px solid rgb(233, 233, 233);
    user-select: none;
}

.tools {
    background-color: #F0F8FF;
    height: 45em;
    width: 45em;
    max-width: 100%;
    overflow-y: scroll;
    padding: 2em;
    z-index: 2;
    border-radius: 20px;
    display: flex;
    flex-direction: column;
    gap: 1em;
    box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px;
}

#toolDisplay {
    display: flex;
    flex-direction: column;
    gap: 1em;
    height: 100%;
    width: 100%;
}

.toolCard {
    width: 100%;
    height: 10%;
    border-radius: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 2px 0px;
    gap: 1em;
    text-decoration: none;
    color: black;
}

.container {
    height: 100%;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-image: linear-gradient(35deg,
        hsl(320deg 60% 92%) 0%,
        hsl(330deg 100% 93%) 24%,
        hsl(339deg 100% 92%) 36%,
        hsl(354deg 100% 92%) 43%,
        hsl(13deg 100% 89%) 48%,
        hsl(26deg 100% 85%) 52%,
        hsl(36deg 100% 81%) 56%,
        hsl(44deg 100% 77%) 61%,
        hsl(50deg 100% 74%) 67%,
        hsl(55deg 100% 72%) 90%);
    overflow: hidden;
}

.noise {
    position: absolute;
    height: 100%;
    width: 100%;
    background-image: url("../../public/toolImages/noise2.svg");
    opacity: 0.1;
}

.dropdown {
    display: flex;
    position: relative;
    height: 700px;
}

.button {
    border: 1px solid #F0F8FF;
    border-radius: 50%;
    width: 6em;
    height: 6em;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    user-select: none;
    background-color: #F0F8FF;
    box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px;
}

.menu {
    width: 100%;
    position: absolute;
    top: 5rem;
    left: 0;
    padding: 0.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    display: flex;
    flex-direction: column;
    gap: 1em;
    justify-content: center;
    align-items: center;
}

.menu-item {
    width: 5rem;
    height: 5rem;
    border-radius: 50%;
    cursor: pointer;
    text-align: center;
    background-color: #F0F8FF;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 0.9em;
    user-select: none;
    box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 3px 0px;
}

.menu-item:hover, .clickedOn {
    background-image: linear-gradient(35deg,
        hsl(320deg 60% 92%) 0%,
        hsl(330deg 100% 93%) 24%,
        hsl(339deg 100% 92%) 36%,
        hsl(354deg 100% 92%) 43%,
        hsl(13deg 100% 89%) 48%,
        hsl(26deg 100% 85%) 52%,
        hsl(36deg 100% 81%) 56%,
        hsl(44deg 100% 77%) 61%,
        hsl(50deg 100% 74%) 67%,
        hsl(55deg 100% 72%) 90%);
}
@media (max-width: 768px) {

    .content {
        flex-direction: column;
        padding: 1em;
        gap:0;
        justify-content: start;
        align-items:  start;
    }

    .dropdown {
        height: auto;
        align-self: flex-start;
        margin-bottom: 1em;
        width: 100%;
        gap:0.5em;
        justify-content: center;
        align-items: center;
    }

    .dropdown {
        height: auto;
        margin-bottom: 1em;
        width: 100%;
        gap:0.5em;
        justify-content: flex-start;
        align-items: flex-start;

    }

    
    .menu {
        flex-direction: row;
        justify-content: flex-start;
        width: 80%;
        overflow-x: auto;
        white-space: nowrap;
        padding: 1em 0;
        position: initial;
        gap:0;
        padding:0;

    }

    .menu-item {
        flex: 0 0 auto;
        margin-right: 0.5em;
    }

    .tools {
        width: 100%;
        height: auto;
        max-height: 70vh;
        font-size: 0.9em;
    }

    .toolCard {
        flex-direction: column;
        height: auto;
        padding: 0.8em;
    }

    .tag {
        font-size: 0.4em;
        padding: 0.3em 0.6em;
    }

    #toolDisplay {
        gap: 0.8em;
    }

    .toolName {
        font-size: 1em;
        margin-bottom: 0.3em;
    }

    .toolDescription {
        font-size: 0.5em;
    }

}

</style>

<script define:vars= {{tools}}>

document.addEventListener('DOMContentLoaded', (event) => {
    // Attach event listeners to category menu items
    const allCategories = document.querySelectorAll('.menu-item');
    allCategories.forEach(category => {
        category.addEventListener('click', (event) => onCategoryClick(event));
    });

    // Add event delegation for all tag clicks
    document.addEventListener('click', function(event) {
        const tagComponent = event.target.closest('tagcomp-component');
        const allComponent = event.target.closest('all-component');
        
        if (tagComponent) {
            onTagClick(event, tagComponent);
        } else if (allComponent) {
            onAllTagClick(event, allComponent);
        }
    });

    // Initialize with 3D tools
    onCategoryClick({ preventDefault: () => {}, target: document.getElementById('3d') });
});

function displayTools(filteredTools) {
    const toolDisplay = document.getElementById('toolDisplay');
    toolDisplay.innerHTML = '';

    filteredTools.forEach(tool => {
        const myElement = document.createElement('toolcard-component');
        myElement.setAttribute('icon', tool.icon);
        myElement.setAttribute('name', tool.name);
        myElement.setAttribute('description', tool.description);
        myElement.setAttribute('category', tool.category);
        myElement.setAttribute('tag', tool.tag);
        myElement.setAttribute('link', tool.link);
        toolDisplay.appendChild(myElement);
    });
}

function filterToolsByCategoryAndTag(category, tag) {
    return tools.filter(tool => tool.category === category && tool.tag === tag);
}

function filterToolsByCategory(category) {
    return tools.filter(tool => tool.category === category);
}

function onAllTagClick(event, allComponent) {
    event.preventDefault();

    const allTags = document.querySelectorAll("tagcomp-component, all-component");
    allTags.forEach(tag => {
        const tagElement = tag.shadowRoot.querySelector('.tag');
        if (tagElement) {
            tagElement.classList.remove("clickedOn");
        }
    });

    const allTag = allComponent.shadowRoot.querySelector('#all');
    if (allTag) {
        allTag.classList.add("clickedOn");
    }

    const selectedCategory = document.querySelector('.selectedCategory');
    if (selectedCategory) {
        const categoryName = selectedCategory.id;
        const filteredTools = filterToolsByCategory(categoryName);
        displayTools(filteredTools);
    }
}

function onCategoryClick(event) {
    event.preventDefault();

    const heading = document.getElementById("toolCategory");
    const tagsContainer = document.querySelector('.tags');

    if (!tagsContainer) {
        console.error('Tags container not found');
        return;
    }

    const target = event.target.closest('.menu-item');
    const categoryName = target.id;

    heading.textContent = `${categoryName} Tools`;

    document.querySelectorAll('.menu-item').forEach(category => {
        category.classList.remove('clickedOn', 'selectedCategory');
    });

    target.classList.add('clickedOn', 'selectedCategory');

    displayTags(categoryName);
    const filteredTools = filterToolsByCategory(categoryName);
    displayTools(filteredTools);
}

function onTagClick(event, tagComponent) {
    event.preventDefault();

    const allTags = document.querySelectorAll("tagcomp-component, all-component");

    allTags.forEach(tag => {
        const tagElement = tag.shadowRoot.querySelector('.tag');
        if (tagElement) {
            tagElement.classList.remove("clickedOn");
        }
    });

    const clickedTag = tagComponent.shadowRoot.querySelector('.tag');
    if (clickedTag) {
        clickedTag.classList.add("clickedOn");

        const selectedCategory = document.querySelector('.selectedCategory');
        if (selectedCategory) {
            const categoryName = selectedCategory.id;
            const tagName = tagComponent.getAttribute('tag');
            const filteredTools = filterToolsByCategoryAndTag(categoryName, tagName);
            displayTools(filteredTools);
        }
    } else {
        console.error('clickedTag is null');
    }
}

function displayTags(categoryName) {
    console.warn(`displayTags is running. The Category name is ${categoryName}`);
    
    const tagsContainer = document.querySelector('.tags');
    tagsContainer.innerHTML = '';

    const allElement = document.createElement('all-component');
    tagsContainer.appendChild(allElement);

    const filteredTools = tools.filter(tool => tool.category === categoryName);
    const uniqueTags = [...new Set(filteredTools.map(tool => tool.tag))];
    
    uniqueTags.forEach(tag => {
        const myElement = document.createElement('tagcomp-component');
        myElement.setAttribute('tag', tag);
        tagsContainer.appendChild(myElement);
    });
}
</script>


